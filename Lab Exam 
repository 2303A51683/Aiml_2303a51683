{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPXz0GtWmfuWHejV/83tcSg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A51683/Aiml_2303a51683/blob/main/Lab%20Exam%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming your data is in a CSV file named 'your_data.csv'\n",
        "# Replace 'your_data.csv' with the actual file path if it's different\n",
        "data = pd.read_csv('/content/buddymove+data+set.zip')\n",
        "\n",
        "# Calculate the average interests\n",
        "average_interests = data.iloc[:, 1:].mean()\n",
        "\n",
        "# Sort the average interests in descending order\n",
        "average_interests = average_interests.sort_values(ascending=False) #corrected line\n",
        "\n",
        "# Get the top 5 attributes\n",
        "top_5_attributes = average_interests.head(5)\n",
        "\n",
        "# Print the results\n",
        "print(\"Top 5 attributes:\\n\", top_5_attributes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qOcaiEv9-xDa",
        "outputId": "67647eb8-1d9c-4f0e-d713-d2509d1a5911"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 attributes:\n",
            " Nature       124.518072\n",
            "Picnic       120.401606\n",
            "Theatre      116.377510\n",
            "Shopping     112.638554\n",
            "Religious    109.779116\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "most_liked_attribute = data.iloc[:, 1:].max().idxmax()\n",
        "most_liked_value = data[most_liked_attribute].max()\n",
        "print(f\"The most liked travel attribute is {most_liked_attribute} with a maximum interest level of {most_liked_value}.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U5upwl0s_yWy",
        "outputId": "5e8e195a-58a3-41fb-ac07-fc7aa4554e0d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The most liked travel attribute is Nature with a maximum interest level of 318.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the attributes with the maximum and minimum average interest levels\n",
        "max_attribute = average_interests.idxmax()\n",
        "max_value = average_interests.max()\n",
        "min_attribute = average_interests.idxmin()\n",
        "min_value = average_interests.min()\n",
        "\n",
        "print(f\"Maximum preferred attribute: {max_attribute} ({max_value})\")\n",
        "print(f\"Minimum preferred attribute: {min_attribute} ({min_value})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CT45YhzZ_yY8",
        "outputId": "f40c5203-6893-41b6-fec5-b422b90810d7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum preferred attribute: Nature (124.51807228915662)\n",
            "Minimum preferred attribute: Sports (11.987951807228916)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "role_of_beaches = average_interests.get('Nature', 'Not available')\n",
        "role_of_theatres = average_interests.get('Theatre', 'Not available')\n",
        "role_of_malls = average_interests.get('Shopping', 'Not available')\n",
        "role_of_parks = average_interests.get('Picnic', 'Not available')\n",
        "\n",
        "print(\"Role of features:\")\n",
        "print(f\"Beaches (Nature): {role_of_beaches}\")\n",
        "print(f\"Theatres: {role_of_theatres}\")\n",
        "print(f\"Malls (Shopping): {role_of_malls}\")\n",
        "print(f\"Parks (Picnic): {role_of_parks}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8_NqW2dk_-1W",
        "outputId": "bfed3ed7-5bdd-4c08-89da-8d233b413ef8"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Role of features:\n",
            "Beaches (Nature): 124.51807228915662\n",
            "Theatres: 116.37751004016064\n",
            "Malls (Shopping): 112.63855421686748\n",
            "Parks (Picnic): 120.40160642570281\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary library\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming your data is in a CSV file named 'your_data.csv'\n",
        "# Replace 'your_data.csv' with the actual file path if it's different\n",
        "data = pd.read_csv('/content/buddymove+data+set.zip')\n",
        "\n",
        "# Select only numerical columns for correlation calculation\n",
        "numerical_data = data.select_dtypes(include=['number']) # Select columns with numerical data types\n",
        "\n",
        "# Calculate the correlation of 'Sports' with other numerical attributes\n",
        "sports_correlation = numerical_data.corr()['Sports']\n",
        "\n",
        "# Sort the correlation values in descending order\n",
        "sports_correlation = sports_correlation.sort_values(ascending=False) # Call sort_values on the sports_correlation Series\n",
        "\n",
        "# Print the results\n",
        "print(\"Correlation of Sports with other attributes:\\n\", sports_correlation)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "glX62xd-ADVD",
        "outputId": "5097ff6b-16f9-4a0b-a369-7954d6994d8a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation of Sports with other attributes:\n",
            " Sports       1.000000\n",
            "Picnic       0.797777\n",
            "Religious    0.623400\n",
            "Theatre      0.611728\n",
            "Nature       0.608372\n",
            "Shopping     0.583956\n",
            "Name: Sports, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Prepare data for clustering (excluding 'User Id')\n",
        "clustering_data = data.iloc[:, 1:]\n",
        "scaler = StandardScaler()\n",
        "clustering_data_scaled = scaler.fit_transform(clustering_data)\n",
        "\n",
        "# Apply K-Means clustering\n",
        "kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "data['Cluster'] = kmeans.fit_predict(clustering_data_scaled)\n",
        "\n",
        "print(\"Cluster assignments:\\n\", data[['User Id', 'Cluster']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d1eZZ8q1ADRp",
        "outputId": "4b8892cd-684e-483f-e170-ddebf6a45f8b"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster assignments:\n",
            "   User Id  Cluster\n",
            "0  User 1        2\n",
            "1  User 2        2\n",
            "2  User 3        2\n",
            "3  User 4        2\n",
            "4  User 5        2\n"
          ]
        }
      ]
    }
  ]
}